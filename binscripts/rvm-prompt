#!/usr/bin/env bash

add(){
  token="$1"
  eval "${token}_flag=1" ; shift
  if [[ ! -z "$format" ]] ; then
    format="${format}-\$${token}"
  else
    format="\$${token}"
  fi
}

if [[ ! -z "$(which ruby 2>/dev/null | awk '/rvm/{print}')" ]] ; then
  unset format
  while [[ $# -gt 0 ]] ; do
    token="$1" ; shift
    case "$token" in
      u|unicode)      add "unicode"      ;;
      i|interpreter)  add "interpreter"  ;;
      v|version)      add "version"      ;;
      p|patchlevel)   add "patchlevel"   ;;
      r|revision)     add "revision"     ;;
      a|architecture) add "architecture" ;;
      *) echo "Unrecognized command line option '$token' for $0" ; exit 1 ;;
    esac
  done

  if [[ -z "$format" ]] ; then
    add "unicode"
    # add "interpreter"
    # add "version"
    # add "patchlevel"
  fi

  ruby_string=$(dirname "$(which ruby 2>/dev/null)" | xargs dirname | xargs basename)
  if [[ ! -z "$interpreter_flag" ]] ; then
    interpreter="$(echo $ruby_string | awk -F'-' '{print $1}')"
  fi
  if [[ ! -z "$version_flag" ]] ; then
    version="$(echo $ruby_string | awk -F'-' '{print $2}')"
  fi
  if [[ ! -z "$patchlevel_flag" ]] ; then
    patchlevel=$(echo $ruby_string | awk -F'-' '{print $3}')
  fi
  if [[ ! -z "$architecture_flag" ]] ; then
    architecture="$(echo "$(ruby -v)" | sed 's/^.*\[//' | sed 's/\].*$//')"
  fi
  if [[ ! -z "$unicode_flag" ]] ; then
    interpreter="$(echo $ruby_string | awk -F'-' '{print $1}')"
    version="$(echo $ruby_string | awk -F'-' '{print $2}')"
    [[ x$interpreter = xjruby    ]] && unicode="☯"
    [[ x$interpreter = xrbx      ]] && unicode="☃"
    [[ x$interpreter = xree      ]] && unicode="✈"
    [[ x$interpreter = xmacruby  ]] && unicode="⌘"
    [[ x$interpreter = xmaglev   ]] && unicode="㎖"
    [[ x$interpreter = xironruby ]] && unicode="♭"
    [[ x$interpreter = xmput     ]] && unicode="⎈"
    [[ x$interpreter = xsystem   ]] && unicode="➆"
    if [[ x$interpreter = xruby ]] ; then
        [[ x$version = x1.8.6 ]] && unicode="❻"
        [[ x$version = x1.8.7 ]] && unicode="❼"
        [[ x$version = x1.9.1 ]] && unicode="❶"
        [[ x$version = x1.9.2 ]] && unicode="❷"
    fi 
  fi

  command="prompt=\"$format\""
  eval "$command"
  echo "${prompt/-]/]}"
fi

exit 0

